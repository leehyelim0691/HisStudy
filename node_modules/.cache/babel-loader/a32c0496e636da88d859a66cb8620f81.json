{"ast":null,"code":"/**\n * @author Titus Wormer\n * @copyright 2015 Titus Wormer\n * @license MIT\n * @module remark:parse:tokenize:yaml\n * @fileoverview Tokenise YAML.\n */\n'use strict';\n\nmodule.exports = yaml;\nyaml.onlyAtStart = true;\nvar FENCE = '---';\nvar C_DASH = '-';\nvar C_NEWLINE = '\\n';\n/* Tokenise YAML. */\n\nfunction yaml(eat, value, silent) {\n  var self = this;\n  var subvalue;\n  var content;\n  var index;\n  var length;\n  var character;\n  var queue;\n\n  if (!self.options.yaml || value.charAt(0) !== C_DASH || value.charAt(1) !== C_DASH || value.charAt(2) !== C_DASH || value.charAt(3) !== C_NEWLINE) {\n    return;\n  }\n\n  subvalue = FENCE + C_NEWLINE;\n  content = '';\n  queue = '';\n  index = 3;\n  length = value.length;\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character === C_DASH && (queue || !content) && value.charAt(index + 1) === C_DASH && value.charAt(index + 2) === C_DASH) {\n      /* istanbul ignore if - never used (yet) */\n      if (silent) {\n        return true;\n      }\n\n      subvalue += queue + FENCE;\n      return eat(subvalue)({\n        type: 'yaml',\n        value: content\n      });\n    }\n\n    if (character === C_NEWLINE) {\n      queue += character;\n    } else {\n      subvalue += queue + character;\n      content += queue + character;\n      queue = '';\n    }\n  }\n}","map":{"version":3,"sources":["/Users/hyerm2/Desktop/2021SWFestival/HisStudy/node_modules/remark-parse/lib/tokenize/yaml.js"],"names":["module","exports","yaml","onlyAtStart","FENCE","C_DASH","C_NEWLINE","eat","value","silent","self","subvalue","content","index","length","character","queue","options","charAt","type"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,IAAnB;AAEA,IAAIC,KAAK,GAAG,KAAZ;AACA,IAAIC,MAAM,GAAG,GAAb;AACA,IAAIC,SAAS,GAAG,IAAhB;AAEA;;AACA,SAASJ,IAAT,CAAcK,GAAd,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkC;AAChC,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,QAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,KAAJ;;AAEA,MACE,CAACN,IAAI,CAACO,OAAL,CAAaf,IAAd,IACAM,KAAK,CAACU,MAAN,CAAa,CAAb,MAAoBb,MADpB,IAEAG,KAAK,CAACU,MAAN,CAAa,CAAb,MAAoBb,MAFpB,IAGAG,KAAK,CAACU,MAAN,CAAa,CAAb,MAAoBb,MAHpB,IAIAG,KAAK,CAACU,MAAN,CAAa,CAAb,MAAoBZ,SALtB,EAME;AACA;AACD;;AAEDK,EAAAA,QAAQ,GAAGP,KAAK,GAAGE,SAAnB;AACAM,EAAAA,OAAO,GAAG,EAAV;AACAI,EAAAA,KAAK,GAAG,EAAR;AACAH,EAAAA,KAAK,GAAG,CAAR;AACAC,EAAAA,MAAM,GAAGN,KAAK,CAACM,MAAf;;AAEA,SAAO,EAAED,KAAF,GAAUC,MAAjB,EAAyB;AACvBC,IAAAA,SAAS,GAAGP,KAAK,CAACU,MAAN,CAAaL,KAAb,CAAZ;;AAEA,QACEE,SAAS,KAAKV,MAAd,KACCW,KAAK,IAAI,CAACJ,OADX,KAEAJ,KAAK,CAACU,MAAN,CAAaL,KAAK,GAAG,CAArB,MAA4BR,MAF5B,IAGAG,KAAK,CAACU,MAAN,CAAaL,KAAK,GAAG,CAArB,MAA4BR,MAJ9B,EAKE;AACA;AACA,UAAII,MAAJ,EAAY;AACV,eAAO,IAAP;AACD;;AAEDE,MAAAA,QAAQ,IAAIK,KAAK,GAAGZ,KAApB;AAEA,aAAOG,GAAG,CAACI,QAAD,CAAH,CAAc;AACnBQ,QAAAA,IAAI,EAAE,MADa;AAEnBX,QAAAA,KAAK,EAAEI;AAFY,OAAd,CAAP;AAID;;AAED,QAAIG,SAAS,KAAKT,SAAlB,EAA6B;AAC3BU,MAAAA,KAAK,IAAID,SAAT;AACD,KAFD,MAEO;AACLJ,MAAAA,QAAQ,IAAIK,KAAK,GAAGD,SAApB;AACAH,MAAAA,OAAO,IAAII,KAAK,GAAGD,SAAnB;AACAC,MAAAA,KAAK,GAAG,EAAR;AACD;AACF;AACF","sourcesContent":["/**\n * @author Titus Wormer\n * @copyright 2015 Titus Wormer\n * @license MIT\n * @module remark:parse:tokenize:yaml\n * @fileoverview Tokenise YAML.\n */\n\n'use strict';\n\nmodule.exports = yaml;\nyaml.onlyAtStart = true;\n\nvar FENCE = '---';\nvar C_DASH = '-';\nvar C_NEWLINE = '\\n';\n\n/* Tokenise YAML. */\nfunction yaml(eat, value, silent) {\n  var self = this;\n  var subvalue;\n  var content;\n  var index;\n  var length;\n  var character;\n  var queue;\n\n  if (\n    !self.options.yaml ||\n    value.charAt(0) !== C_DASH ||\n    value.charAt(1) !== C_DASH ||\n    value.charAt(2) !== C_DASH ||\n    value.charAt(3) !== C_NEWLINE\n  ) {\n    return;\n  }\n\n  subvalue = FENCE + C_NEWLINE;\n  content = '';\n  queue = '';\n  index = 3;\n  length = value.length;\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (\n      character === C_DASH &&\n      (queue || !content) &&\n      value.charAt(index + 1) === C_DASH &&\n      value.charAt(index + 2) === C_DASH\n    ) {\n      /* istanbul ignore if - never used (yet) */\n      if (silent) {\n        return true;\n      }\n\n      subvalue += queue + FENCE;\n\n      return eat(subvalue)({\n        type: 'yaml',\n        value: content\n      });\n    }\n\n    if (character === C_NEWLINE) {\n      queue += character;\n    } else {\n      subvalue += queue + character;\n      content += queue + character;\n      queue = '';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}